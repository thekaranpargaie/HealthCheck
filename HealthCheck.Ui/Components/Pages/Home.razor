@page "/"
@rendermode InteractiveServer
@implements IDisposable
@using System.Net.Http.Json
@using HealthCheck.Main.Models
@inject IJSRuntime JS

<PageTitle>Health Dashboard | System Monitor</PageTitle>

<style>
    .dashboard-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        justify-content: flex-start;
        margin-top: 1rem;
    }

    .health-card {
        min-width: 320px;
        max-width: 350px;
        margin-bottom: 1rem;
    }

    .status-pill {
        padding: 0.35em 0.8em;
        font-weight: 600;
        font-size: 0.95em;
    }

    .history-row {
        display: flex;
        gap: 0.4em;
        margin-top: 1.2em;
        justify-content: flex-start;
        align-items: center;
    }

    .history-pill {
        width: 16px;
        height: 16px;
        border-radius: 4px;
        display: inline-block;
        border: 1px solid #e0e0e0;
    }

    .pill-healthy {
        background: #28a745;
    }

    .pill-unhealthy {
        background: #dc3545;
    }

    .pill-missing {
        background: #d3d3d3;
    }

    .countdown-circle {
        background-color: #007bff;
        color: white;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        font-size: 1rem;
        animation: pulse 1s infinite;
    }

    @@keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7);
        }

        70% {
            box-shadow: 0 0 0 10px rgba(0, 123, 255, 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
        }
    }
</style>
<div class="top-bar p-3 mb-4 border-bottom shadow-sm d-flex justify-content-between align-items-center">
    <h2 class="m-0">Health Dashboard</h2>
    <div class="countdown-circle" title="Next update in @secondsRemaining seconds">
        @secondsRemaining
    </div>
</div>
<article class="content px-4">
    @if (isLoading)
    {
        <p>Loading health data...</p>
    }
    else if (errorMessage != null)
    {
        <p class="text-danger">@errorMessage</p>
    }
    else
    {
        <div class="dashboard-container">
            @foreach (var group in groupedResults)
            {
                var latest = group.Value.LastOrDefault();
                var isHealthy = latest?.IsHealthy == true;
                var statusText = isHealthy ? "Healthy" : "Unhealthy";
                var statusClass = isHealthy ? "bg-success text-white" : "bg-danger text-white";
                var iconClass = isHealthy ? "bi bi-check-circle-fill" : "bi bi-exclamation-circle-fill";

                <div class="card health-card shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div class="fw-bold">@group.Key</div>
                        <span class="badge @statusClass status-pill">
                            <i class="@iconClass me-1"></i> @statusText
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="text-muted mb-2">
                            <small>Last checked: @ConvertToClientTime(latest?.Timestamp)</small>
                        </div>
                        <div class="mb-2">@latest?.Description</div>
                        <div class="history-row">
                            @foreach (var pill in GetHistoryPills(group.Value))
                            {
                                <span class="history-pill @pill.CssClass" title="@pill.Tooltip"></span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</article>

@code {
    private List<HealthCheckPingResult> results = new();
    private Dictionary<string, List<HealthCheckPingResult>> groupedResults = new();
    private bool isLoading = true;
    private string? errorMessage;
    private CancellationTokenSource _cts = new();
    private int secondsRemaining = 60;
    private System.Threading.Timer? countdownTimer;
    private const int PillsToShow = 24;
    private string? clientTimeZoneId;
    private bool jsInteropCalled = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        countdownTimer = StartCountdownTimer();
        _ = RunPeriodicUpdate(_cts.Token);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !jsInteropCalled)
        {
            clientTimeZoneId = await JS.InvokeAsync<string>("blazorCulture.getTimeZone");
            jsInteropCalled = true;

            // Since time zone info is now available, re-render to update displayed times:
            StateHasChanged();
        }
    }

    private System.Threading.Timer StartCountdownTimer()
    {
        return new System.Threading.Timer(_ =>
        {
            if (secondsRemaining > 0)
                secondsRemaining--;
            else
                secondsRemaining = 60;

            InvokeAsync(StateHasChanged);
        }, null, 0, 1000);
    }

    private async Task RunPeriodicUpdate(CancellationToken token)
    {
        var timer = new PeriodicTimer(TimeSpan.FromMinutes(1));
        try
        {
            while (await timer.WaitForNextTickAsync(token))
            {
                await InvokeAsync(async () =>
                {
                    await LoadData();
                    StateHasChanged();
                });
            }
        }
        catch (OperationCanceledException)
        {
            // Graceful shutdown
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            var http = new HttpClient { BaseAddress = new Uri("http://healthcheck-api:5001/") };
            results = await http.GetFromJsonAsync<List<HealthCheckPingResult>>("api/healthchecks") ?? new();
            groupedResults = results
                .GroupBy(r => r.ServiceKey)
                .ToDictionary(g => g.Key, g => g.OrderBy(x => x.Timestamp).ToList());
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load health data: " + ex.Message;
        }
        isLoading = false;
    }

    private IEnumerable<(string CssClass, string Tooltip)> GetHistoryPills(List<HealthCheckPingResult> pings)
    {
        var recent = pings
            .OrderByDescending(p => p.Timestamp)
            .Take(PillsToShow)
            .OrderBy(p => p.Timestamp)
            .ToList();

        int missing = PillsToShow - recent.Count;

        for (int i = 0; i < missing; i++)
        {
            yield return ("pill-missing", "No data");
        }

        foreach (var ping in recent)
        {
            yield return (
                ping.IsHealthy ? "pill-healthy" : "pill-unhealthy",
                $"{ping.Timestamp.ToLocalTime():g} - {(ping.IsHealthy ? "Healthy" : "Unhealthy")}"
            );
        }
    }
    private string ConvertToClientTime(DateTime? utcTime)
    {
        if (utcTime == null)
            return "N/A";

        if (clientTimeZoneId == null)
            return utcTime.Value.ToString("g") + " (UTC)";

        try
        {
            var tz = TimeZoneInfo.FindSystemTimeZoneById(clientTimeZoneId);
            var localTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.SpecifyKind(utcTime.Value, DateTimeKind.Utc), tz);
            return localTime.ToString("g") + $" ({clientTimeZoneId})";
        }
        catch
        {
            // Fallback on error
            return utcTime.Value.ToString("g") + " (UTC)";
        }
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
        countdownTimer?.Dispose();
    }
}
